name: Merge Game Mappings and Programs

on:
  push:
    branches:
      - main
    paths:
      - 'games/**/*.json'
      - 'programs/**/*.json'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  merge-mappings:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Merge game mappings and programs
        run: |
          # Create shared merge script (DRY)
          cat > merge-mappings.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          /**
           * Merge all JSON files from a directory into a single output file
           * @param {string} sourceDir - Directory containing individual JSON files (e.g., 'games' or 'programs')
           * @param {string} outputFile - Output file name (e.g., 'mappings.json' or 'programs.json')
           * @param {string} typeName - Type name for logging (e.g., 'game' or 'program')
           * @param {boolean} generateIndex - Whether to generate index.json file
           */
          function mergeMappings(sourceDir, outputFile, typeName, generateIndex = false) {
            const dir = path.join(__dirname, sourceDir);
            const output = path.join(__dirname, outputFile);

            // Read all JSON files from directory
            const files = fs.readdirSync(dir)
              .filter(file => file.endsWith('.json'))
              .sort();

            const mappings = [];

            for (const file of files) {
              const filePath = path.join(dir, file);
              try {
                const content = fs.readFileSync(filePath, 'utf8');
                const mapping = JSON.parse(content);

                // Validate required fields
                if (!mapping.processName || !mapping.twitchCategoryId || !mapping.twitchCategoryName) {
                  console.error(`❌ Invalid ${typeName} in ${file}: missing required fields`);
                  process.exit(1);
                }

                mappings.push(mapping);
                console.log(`✅ Loaded ${file}: ${mapping.processName} → ${mapping.twitchCategoryName}`);
              } catch (error) {
                console.error(`❌ Error reading ${file}:`, error.message);
                process.exit(1);
              }
            }

            // Sort by processName (case-insensitive)
            mappings.sort((a, b) =>
              a.processName.toLowerCase().localeCompare(b.processName.toLowerCase())
            );

            // Read existing output file to preserve metadata
            let metadata = {};
            if (fs.existsSync(output)) {
              try {
                const existing = JSON.parse(fs.readFileSync(output, 'utf8'));
                // Extract metadata fields (everything except 'mappings')
                const { mappings: _, ...rest } = existing;
                metadata = rest;
              } catch (error) {
                console.warn(`⚠️ Could not read existing ${outputFile} metadata`);
              }
            }

            // Create final structure with preserved metadata
            const outputData = {
              ...metadata,
              mappings: mappings
            };

            // Write to output file
            fs.writeFileSync(output, JSON.stringify(outputData, null, 2) + '\n', 'utf8');
            console.log(`\n🎉 Successfully merged ${mappings.length} ${typeName} mappings into ${outputFile}`);

            // Generate index.json if requested
            if (generateIndex) {
              const indexFile = path.join(__dirname, 'index.json');
              let existingIndex = { formatVersion: '1' };
              if (fs.existsSync(indexFile)) {
                try {
                  existingIndex = JSON.parse(fs.readFileSync(indexFile, 'utf8'));
                } catch (error) {
                  console.warn('⚠️ Could not read existing index.json, using defaults');
                }
              }

              const indexData = {
                lastUpdate: Date.now(),
                formatVersion: existingIndex.formatVersion || '1'
              };
              fs.writeFileSync(indexFile, JSON.stringify(indexData, null, 2) + '\n', 'utf8');
              console.log(`📋 Updated index.json with timestamp: ${new Date(indexData.lastUpdate).toISOString()}`);
            }
          }

          // Parse command line arguments
          const args = process.argv.slice(2);
          const sourceDir = args[0];
          const outputFile = args[1];
          const typeName = args[2];
          const generateIndex = args[3] === 'true';

          mergeMappings(sourceDir, outputFile, typeName, generateIndex);
          EOF

          # Run merge for games (with index.json generation)
          echo "📦 Merging game mappings..."
          node merge-mappings.js games mappings.json game true

          echo ""
          echo "📦 Merging programs..."
          node merge-mappings.js programs programs.json program false

          # Check if mappings.json, programs.json, or index.json changed
          if git diff --quiet mappings.json programs.json index.json; then
            echo "No changes to mappings.json, programs.json, or index.json"
            echo "changed=false" >> $GITHUB_ENV
          else
            echo "mappings.json, programs.json, and/or index.json has been updated"
            echo "changed=true" >> $GITHUB_ENV
          fi

      - name: Commit and push if changed
        if: env.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add mappings.json programs.json index.json
          git commit -m "chore: regenerate mappings.json and programs.json

          🤖 Auto-generated by merge-mappings workflow from games/ and programs/ directories"
          git push

      - name: Summary
        run: |
          echo "## Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total game files:** $(ls -1 games/*.json 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total program files:** $(ls -1 programs/*.json 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes:** ${{ env.changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.changed }}" == "true" ]; then
            echo "✅ mappings.json, programs.json, and index.json have been regenerated and committed" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No changes detected in mappings.json, programs.json, or index.json" >> $GITHUB_STEP_SUMMARY
          fi
